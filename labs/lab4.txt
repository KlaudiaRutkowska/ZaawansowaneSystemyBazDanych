--zadanie 1
SELECT employee_id,
       last_name,
       salary,
       RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;

--zadanie 2
SELECT employee_id,
       last_name,
       salary,
       SUM(salary) OVER () AS total_salaries
FROM employees;

--zadanie 3
SELECT e.last_name,
       s.product_name,
       SUM(s.sale_value) OVER (PARTITION BY s.employee_id ORDER BY s.sale_date
                               ROWS UNBOUNDED PRECEDING) AS cumulative_sales,
       RANK() OVER (ORDER BY s.sale_value DESC) AS global_order_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id;

--zadanie 4
SELECT e.last_name,
       s.product_name,
       s.product_price,
       COUNT(*) OVER (PARTITION BY s.product_id, TRUNC(s.sale_date)) AS transactions_count,
       SUM(s.product_price * s.quantity) OVER (PARTITION BY s.product_id, TRUNC(s.sale_date)) AS daily_total,
       LAG(s.product_price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS previous_price,
       LEAD(s.product_price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS next_price
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id;

--zadanie 5
SELECT s.product_name,
       s.product_price,
       SUM(s.product_price * s.quantity) OVER (PARTITION BY s.product_id, TRUNC(s.sale_date, 'MM')) AS total_paid_month,
       SUM(s.product_price * s.quantity) OVER (PARTITION BY s.product_id, TRUNC(s.sale_date, 'MM')
       ORDER BY s.sale_date ROWS UNBOUNDED PRECEDING) AS cumulative_paid_month
FROM sales s;

--zadanei 6
SELECT p22.product_name,
       p22.category,
       p22.product_price AS price_2022,
       p23.product_price AS price_2023,
       (p23.product_price - p22.product_price) AS price_difference,
       p22.sale_date
FROM (
    SELECT product_id, product_name, category, product_price, sale_date
    FROM sales
    WHERE EXTRACT(YEAR FROM sale_date) = 2022
) p22
JOIN (
    SELECT product_id, product_name, category, product_price, sale_date
    FROM sales
    WHERE EXTRACT(YEAR FROM sale_date) = 2023
) p23 ON p22.product_id = p23.product_id
      AND p22.sale_date = p23.sale_date;

--zadanie 7
SELECT product_name,
       category,
       product_price,
       MIN(product_price) OVER (PARTITION BY category) AS min_price,
       MAX(product_price) OVER (PARTITION BY category) AS max_price,
       MAX(product_price) OVER (PARTITION BY category) - MIN(product_price) OVER (PARTITION BY category) AS price_diff
FROM products;

--zadanie 8
SELECT product_name,
       product_price,
       AVG(product_price) OVER (PARTITION BY product_id ORDER BY sale_date
       ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS moving_avg_price
FROM sales;

--zadanie 9
SELECT product_name,
       category,
       RANK() OVER (PARTITION BY category ORDER BY product_price) AS price_rank,
       ROW_NUMBER() OVER (PARTITION BY category ORDER BY product_price) AS rn,
       DENSE_RANK() OVER (PARTITION BY category ORDER BY product_price) AS dense_price_rank
FROM products;

--zadanie 10
SELECT e.last_name,
       s.product_name,
       SUM(s.product_price * s.quantity) OVER (PARTITION BY s.employee_id
       ORDER BY s.sale_date
       ROWS UNBOUNDED PRECEDING) AS cumulative_sales,
       RANK() OVER (ORDER BY s.product_price * s.quantity DESC) AS global_order_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id;

--zadanie 11
SELECT DISTINCT e.first_name,
                e.last_name,
                j.job_title
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id
JOIN jobs j ON e.job_id = j.job_id;
