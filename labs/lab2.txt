--I. Usuniecie wszystkich tabel zbazy
DROP TABLE employees CASCADE CONSTRAINTS;
DROP TABLE departments CASCADE CONSTRAINTS;
DROP TABLE jobs CASCADE CONSTRAINTS;
DROP TABLE locations CASCADE CONSTRAINTS;
DROP TABLE countries CASCADE CONSTRAINTS;
DROP TABLE regions CASCADE CONSTRAINTS;


--II. Przekopiowanie tabel wraz z danymi od uzytkownika HR
CREATE TABLE employees AS
SELECT * FROM HR.employees;

CREATE TABLE departments AS
SELECT * FROM HR.departments;

CREATE TABLE jobs AS
SELECT * FROM HR.jobs;

CREATE TABLE locations AS
SELECT * FROM HR.locations;

CREATE TABLE countries AS
SELECT * FROM HR.countries;

CREATE TABLE regions AS
SELECT * FROM HR.regions;

-- Ustawienie klucza glownego jesli nie zostal przeniesiony
ALTER TABLE employees
  ADD CONSTRAINT employees_pk PRIMARY KEY (employee_id);

-- Ustawienie klucza obcego do tabeli DEPARTMENTS
ALTER TABLE employees
  ADD CONSTRAINT employees_departments_fk
  FOREIGN KEY (department_id)
  REFERENCES departments(department_id);


--III. Stworz nastepujace zapytania lub perspektywy
--zadanie 1
SELECT last_name || ' ' || salary AS wynagrodzenie
FROM employees
WHERE department_id IN (20, 50)
  AND salary BETWEEN 2000 AND 7000
ORDER BY last_name;

--zadanie 2
SELECT hire_date, last_name, &user_column AS user_column
FROM employees
WHERE manager_id IS NOT NULL
  AND TO_CHAR(hire_date, 'YYYY') = '2005'
ORDER BY &user_column;

--zadanie 3
SELECT first_name || ' ' || last_name AS full_name,
       salary,
       phone_number
FROM employees
WHERE SUBSTR(last_name, 3, 1) = 'e'
  AND LOWER(first_name) LIKE '%' || LOWER('&name_part') || '%'
ORDER BY 1 DESC, 2 ASC;

--zadanie 4
SELECT first_name,
       last_name,
       ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS miesiace_przepracowane,
       CASE
         WHEN ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) < 150 THEN salary * 0.10
         WHEN ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) BETWEEN 150 AND 200 THEN salary * 0.20
         ELSE salary * 0.30
       END AS wysokość_dodatku
FROM employees
ORDER BY miesiace_przepracowane;

--zadanie 5
SELECT department_id,
       SUM(salary) AS suma_zarobków,
       ROUND(AVG(salary)) AS średnia_zarobków
FROM employees
GROUP BY department_id
HAVING MIN(salary) > 5000;

--zadanie 6
SELECT e.last_name,
       d.department_id,
       d.department_name,
       e.job_id
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'Toronto';

--zadanie 7
SELECT j.first_name || ' ' || j.last_name AS jennifer,
       e.first_name || ' ' || e.last_name AS wspolpracownik
FROM employees j
JOIN employees e ON j.department_id = e.department_id
WHERE j.first_name = 'Jennifer'
  AND e.employee_id <> j.employee_id;

--zadanie 8
SELECT department_id, department_name
FROM departments d
WHERE NOT EXISTS (
    SELECT 1 FROM employees e
    WHERE e.department_id = d.department_id
);

--zadanie 9
SELECT e.first_name || ' ' || e.last_name AS name,
       e.job_id,
       d.department_name,
       e.salary,
       jg.grade_level AS grade
FROM employees e
LEFT JOIN departments d ON e.department_id = d.department_id
LEFT JOIN job_grades jg ON e.salary BETWEEN jg.low_salary AND jg.high_salary;

--zadanie 10
SELECT first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees)
ORDER BY salary DESC;

--zadanie 11
SELECT employee_id, first_name, last_name
FROM employees
WHERE department_id IN (
    SELECT department_id
    FROM employees
    WHERE LOWER(last_name) LIKE '%u%'
);

--zadanie 12
SELECT first_name, last_name,
       ROUND(MONTHS_BETWEEN(SYSDATE, hire_date), 1) AS miesiace_pracy
FROM employees
WHERE MONTHS_BETWEEN(SYSDATE, hire_date) >
      (SELECT AVG(MONTHS_BETWEEN(SYSDATE, hire_date)) FROM employees);

--zadanie 13
SELECT d.department_name,
       COUNT(e.employee_id) AS liczba_pracownikow,
       AVG(e.salary) AS srednie_wynagrodzenie
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_name
ORDER BY COUNT(e.employee_id) DESC;

--zadanie 14
SELECT first_name, last_name, salary
FROM employees
WHERE salary < (
    SELECT MIN(e2.salary)
    FROM employees e2
    JOIN departments d ON e2.department_id = d.department_id
    WHERE d.department_name = 'IT'
);

--zadanie 15
SELECT DISTINCT d.department_name
FROM departments d
JOIN employees e ON d.department_id = e.department_id
WHERE e.salary > (SELECT AVG(salary) FROM employees);

--zadanie 16
SELECT job_id, AVG(salary) AS avg_salary
FROM employees
GROUP BY job_id
ORDER BY avg_salary DESC
FETCH FIRST 5 ROWS ONLY;

--zadanie 17
SELECT r.region_name,
       COUNT(DISTINCT c.country_id) AS liczba_krajow,
       COUNT(e.employee_id) AS liczba_pracownikow
FROM regions r
JOIN countries c ON r.region_id = c.region_id
JOIN locations l ON c.country_id = l.country_id
JOIN departments d ON l.location_id = d.location_id
LEFT JOIN employees e ON d.department_id = e.department_id
GROUP BY r.region_name;

--zadanie 18
SELECT e.first_name, e.last_name, e.salary,
       m.first_name AS manager_first, m.last_name AS manager_last, m.salary AS manager_salary
FROM employees e
JOIN employees m ON e.manager_id = m.employee_id
WHERE e.salary > m.salary;

--zadanie 19
SELECT TO_CHAR(hire_date, 'MM') AS miesiac,
       COUNT(*) AS liczba_pracownikow
FROM employees
GROUP BY TO_CHAR(hire_date, 'MM')
ORDER BY miesiac;

--zadanie 20
SELECT d.department_name, AVG(e.salary) AS avg_salary
FROM departments d
JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_name
ORDER BY AVG(e.salary) DESC
FETCH FIRST 3 ROWS ONLY;
